{"version":3,"sources":["Components/SearchPhotos.js","App.js","reportWebVitals.js","index.js"],"names":["unsplash","Unsplash","accessKey","SearchPhotos","promiseInProgress","usePromiseTracker","useState","query","setQuery","pics","setPics","searchPhotos","e","a","preventDefault","trackPromise","search","photos","then","toJson","json","results","className","type","color","height","width","onSubmit","htmlFor","name","placeholder","value","onChange","target","map","pic","alt","alt_description","src","urls","full","id","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iSASMA,EAAW,IAAIC,IAAS,CAC1BC,UAFc,gDAKH,SAASC,IACpB,IAAQC,EAAsBC,8BAAtBD,kBACR,EAA0BE,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAwBF,mBAAS,IAAjC,mBAAOG,EAAP,KAAaC,EAAb,KAEMC,EAAY,uCAAG,WAAOC,GAAP,SAAAC,EAAA,sDACjBD,EAAEE,iBAMFC,uBAAaf,EAASgB,OACjBC,OAAOV,EAAO,EAAG,IACjBW,KAAKC,UACLD,MAAK,SAACE,GACHV,EAAQU,EAAKC,aAXJ,2CAAH,sDAgBlB,OAAIjB,EACO,qBAAKkB,UAAU,SAAf,SACH,cAAC,IAAD,CAAQC,KAAK,YAAYC,MAAM,QAAQC,OAAO,MAAMC,MAAM,UAI1D,qCACI,uBAAMJ,UAAU,OAAOK,SAAUhB,EAAjC,UACK,IACD,wBAAOW,UAAU,QAAQM,QAAQ,QAAjC,UACK,IADL,kBAIA,uBACIL,KAAK,OACLM,KAAK,QACLP,UAAU,QACVQ,YAAW,qBACXC,MAAOxB,EACPyB,SACI,SAACpB,GACGJ,EAASI,EAAEqB,OAAOF,UAK9B,wBAAQR,KAAK,SAASD,UAAU,SAAhC,uBAKJ,sBAAKA,UAAU,YAAf,UACKb,EAAKyB,KAAI,SAACC,GAAD,OAEN,qBAAKb,UAAU,QAEXc,IAAKD,EAAIE,gBACTC,IAAKH,EAAII,KAAKC,MAFTL,EAAIM,OAMb,UC7DTC,MAXf,WACE,OACE,qBAAKpB,UAAU,MAAf,SACE,sBAAKA,UAAU,YAAf,UACE,oBAAIA,UAAU,QAAd,sBACA,cAACnB,EAAD,UCIOwC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB3B,MAAK,YAAkD,IAA/C4B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.b9fd9c9b.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport Unsplash, { toJson } from \"unsplash-js\";\nimport { trackPromise, usePromiseTracker } from \"react-promise-tracker\";//to keep track of promise\nimport Loader from 'react-loader-spinner';  //spinner                   //whether promise is finished or not\nimport './loader.css';\n\n\n\nconst accessKey = \"HMyw4t_FnVoPsYapnyyu2YNPy5J6wvbz9ITZ6wmePVo\";\nconst unsplash = new Unsplash({\n    accessKey: accessKey,\n});\n\nexport default function SearchPhotos() {\n    const { promiseInProgress } = usePromiseTracker();\n    const [query, setQuery] = useState(\"\");\n    const [pics, setPics] = useState([]);\n\n    const searchPhotos = async (e) => {\n        e.preventDefault();\n\n        // let response = await unsplash.search.photos(query);\n        // let jsonValue = await response.json();\n        // let picsArray = jsonValue.results;\n        // setPics(picsArray);\n        trackPromise(unsplash.search\n            .photos(query, 1, 20)\n            .then(toJson)\n            .then((json) => {\n                setPics(json.results)\n            }));\n\n\n    };\n    if (promiseInProgress)\n        return <div className=\"loader\" >\n            <Loader type=\"ThreeDots\" color=\"white\" height=\"100\" width=\"100\" />\n        </div>\n    else {\n        return (\n            <>\n                <form className=\"form\" onSubmit={searchPhotos}>\n                    {\" \"}\n                    <label className=\"label\" htmlFor=\"query\">\n                        {\" \"}\n                        ðŸ“·\n                    </label>\n                    <input\n                        type=\"text\"\n                        name=\"query\"\n                        className=\"input\"\n                        placeholder={`Try searching dog\"`}\n                        value={query}\n                        onChange={\n                            (e) => {\n                                setQuery(e.target.value)\n\n                            }\n                        }\n                    />\n                    <button type=\"submit\" className=\"button\">\n                        Search\n                    </button>\n                </form>\n\n                <div className=\"card-list\">\n                    {pics.map((pic) => (\n\n                        <img className=\"image\"\n                            key={pic.id}\n                            alt={pic.alt_description}\n                            src={pic.urls.full}\n\n                        ></img>\n\n                    ))}{\" \"}\n                </div>\n            </>\n        );\n    }\n}","import './App.css';\nimport SearchPhotos from './Components/SearchPhotos';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <h1 className=\"title\">Snapshot</h1>\n        <SearchPhotos />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}